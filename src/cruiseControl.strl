

module CruiseSpeedManagement:

end module

module CarDrivingControl:
	input cdcCruiseState: integer, cdcCruiseSpeed : float, cdcSpeed : float, cdcAccel : float;
	output cdcThrottleCmd : float;

	function regulateThrottle(integer, float, float) : float;

	var regulate := false : boolean in

	loop
		present (cdcCruiseState) then
			if (?cdcCruiseState = 2) then
				regulate := true;
			else
				regulate := false;
			end if
		end present

		if (regulate) then
			if (?cdcCruiseState = 2 and pre(?cdcCruiseState) <> 2) then
				emit ThrottleCmd(regulateThrottle(1, ?cdcCruiseSpeed, ?cdcSpeed));
			else
				emit ThrottleCmd(regulateThrottle(0, ?cdcCruiseSpeed, ?cdcSpeed));
			end if
				emit ThrottleCmd(?cdcAccel);
		end if

		pause
	end loop
	end var
end module

module cruiseController:
	input On, Off, Resue, Set, QuickDecel, QuickAccel;
	input Accel : float, Brake : float, Speed : float;
	output CruiseSpeed : float, ThrottleCmd : float, CruiseState : integer;

	// run cruiseStateFSM

	// run cruiseSpeedManager

	run CarDrivingControl[
		signal CruiseState/cdcCruiseState;
		signal CruiseSpeed/cdcCruiseSpeed;
		signal Speed/cdcSpeed;
		signal Accel/cdcAccel;
		signal ThrottleCmd/cdcThrottleCmd;
	];
end module